/*
 * Integration API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.plugint.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * IntegrationApiModelsCommandsRefund
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-02-24T06:53:25.443Z[GMT]")
public class IntegrationApiModelsCommandsRefund {
  @SerializedName("newPurchasePrice")
  private Integer newPurchasePrice = null;

  @SerializedName("reducePriceBy")
  private Integer reducePriceBy = null;

  @SerializedName("fullRefund")
  private Boolean fullRefund = null;

  public IntegrationApiModelsCommandsRefund newPurchasePrice(Integer newPurchasePrice) {
    this.newPurchasePrice = newPurchasePrice;
    return this;
  }

   /**
   * An integer number in the lowest denomination in the currency being used (e.g. supply 1034 to indicate $10.34)  Must be zero, or greater than zero and less than the current purchase price for the order ID concerned.  Either NewPurchasePrice OR ReducePriceBy must be supplied.    In the event that both are greater than zero, they both must be accurate (i.e. New Purchase Price and Reduction are correct).
   * @return newPurchasePrice
  **/
  @Schema(description = "An integer number in the lowest denomination in the currency being used (e.g. supply 1034 to indicate $10.34)  Must be zero, or greater than zero and less than the current purchase price for the order ID concerned.  Either NewPurchasePrice OR ReducePriceBy must be supplied.    In the event that both are greater than zero, they both must be accurate (i.e. New Purchase Price and Reduction are correct).")
  public Integer getNewPurchasePrice() {
    return newPurchasePrice;
  }

  public void setNewPurchasePrice(Integer newPurchasePrice) {
    this.newPurchasePrice = newPurchasePrice;
  }

  public IntegrationApiModelsCommandsRefund reducePriceBy(Integer reducePriceBy) {
    this.reducePriceBy = reducePriceBy;
    return this;
  }

   /**
   * An integer number in the lowest denomination in the currency being used (e.g. supply 1034 to indicate $10.34)  Must be zero, or greater than zero and less than the current purchase price for the order ID concerned.  This will reduce the current value of a Plan by the nominated amount and helps cater for Split Order situations where the original value of the order is no longer known.
   * @return reducePriceBy
  **/
  @Schema(description = "An integer number in the lowest denomination in the currency being used (e.g. supply 1034 to indicate $10.34)  Must be zero, or greater than zero and less than the current purchase price for the order ID concerned.  This will reduce the current value of a Plan by the nominated amount and helps cater for Split Order situations where the original value of the order is no longer known.")
  public Integer getReducePriceBy() {
    return reducePriceBy;
  }

  public void setReducePriceBy(Integer reducePriceBy) {
    this.reducePriceBy = reducePriceBy;
  }

  public IntegrationApiModelsCommandsRefund fullRefund(Boolean fullRefund) {
    this.fullRefund = fullRefund;
    return this;
  }

   /**
   * If True then the entire order will be refunded instead of reduced.  A setting of True here will completely override the NewPurchasePrice and ReducePriceBy field values.  If Null then assumed to be False.
   * @return fullRefund
  **/
  @Schema(description = "If True then the entire order will be refunded instead of reduced.  A setting of True here will completely override the NewPurchasePrice and ReducePriceBy field values.  If Null then assumed to be False.")
  public Boolean isFullRefund() {
    return fullRefund;
  }

  public void setFullRefund(Boolean fullRefund) {
    this.fullRefund = fullRefund;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationApiModelsCommandsRefund integrationApiModelsCommandsRefund = (IntegrationApiModelsCommandsRefund) o;
    return Objects.equals(this.newPurchasePrice, integrationApiModelsCommandsRefund.newPurchasePrice) &&
        Objects.equals(this.reducePriceBy, integrationApiModelsCommandsRefund.reducePriceBy) &&
        Objects.equals(this.fullRefund, integrationApiModelsCommandsRefund.fullRefund);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newPurchasePrice, reducePriceBy, fullRefund);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationApiModelsCommandsRefund {\n");
    
    sb.append("    newPurchasePrice: ").append(toIndentedString(newPurchasePrice)).append("\n");
    sb.append("    reducePriceBy: ").append(toIndentedString(reducePriceBy)).append("\n");
    sb.append("    fullRefund: ").append(toIndentedString(fullRefund)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
